---
- name: Pull, modify, and push Docker container between environments
  hosts: production_server
  become: yes  # Use this if you need to run commands as a sudo user
  tasks:
    - name: Ensure Docker is installed on production server
      apt:
        name: docker.io
        state: present
      when: ansible_os_family == "Debian"

    - name: Commit the running container to a new image
      command: docker commit prod_nginx prod_nginx:latest

    - name: Export the Docker image to a tar file
      command: docker save -o /tmp/prod_nginx.tar prod_nginx:latest
    
    - name: Archive docker volume
      archive:
        path: /var/lib/html/*
        dest: /tmp/prod_nginx_volume.tar
        
    - name: Copy the volume tar to the local machine
      fetch:
        src: /tmp/prod_nginx_volume.tar
        dest: /tmp/prod_nginx_volume.tar
        flat: yes
        
    - name: Copy the exported container tar to the local machine
      fetch:
        src: /tmp/prod_nginx.tar
        dest: /tmp/prod_nginx.tar
        flat: yes

    - name: Clean up the container tar archive from the production server
      file:
        path: /tmp/prod_nginx.tar
        state: absent
        
    - name: Clean up the volume tar archive from the production server
      file:
        path: /tmp/prod_nginx_volume.tar
        state: absent
        
- name: Modify and push Docker container to development server
  hosts: dev_server
  become: yes
  tasks:
    - name: Ensure Docker is installed on development server
      apt:
        name: docker.io
        state: present
      when: ansible_os_family == "Debian"
      
    - name: Stop and remove existing container if present
      docker_container:
        name: prod_nginx
        state: absent       
        
    - name: Create a volume mount directory
      file:
        path: /var/lib/html/
        state: directory
        mode: '0755'
        
    - name: Copy the container tar to the development server
      copy:
        src: /tmp/prod_nginx.tar
        dest: /tmp/prod_nginx.tar
        
    - name: Copy the volume tar to the development server
      copy:
        src: /tmp/prod_nginx_volume.tar
        dest: /tmp/prod_nginx_volume.tar
        
    - name: Create a directory to extract the container's filesystem
      file:
        path: /tmp/container_filesystem
        state: directory
        
    - name: Extract the container volume
      unarchive:
        src: /tmp/prod_nginx_volume.tar
        dest: /var/lib/html
        remote_src: yes
        
    - name: Modify a specific file inside the container filesystem
      replace:
        path: /var/lib/html/index.html
        regexp: 'Production'
        replace: 'Dev'
        backup: yes  # This will create a backup of the original file
            
    - name: Create a new Docker image from the modified filesystem
      command: |
        docker load -i /tmp/prod_nginx.tar

    - name: Run the new Docker container on the development server
      community.docker.docker_container:
        name: prod_nginx
        image: prod_nginx:latest
        state: started
        ports:
          - "8080:80"
        volumes:
          - /var/lib/html:/usr/share/nginx/html          
        restart_policy: always

    - name: Verify the Docker container is running on the development server
      community.docker.docker_container_info:
        name: prod_nginx
      register: prod_nginx_info
      
    - name: Clean up the container tar archive from the production server
      file:
        path: /tmp/prod_nginx.tar
        state: absent
        
    - name: Clean up the volume tar archive from the production server
      file:
        path: /tmp/prod_nginx_volume.tar
        state: absent

